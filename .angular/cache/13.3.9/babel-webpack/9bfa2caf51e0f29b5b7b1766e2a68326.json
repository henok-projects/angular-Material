{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n/** Constants used to fill up our data base. */\n\nconst FRUITS = ['blueberry', 'lychee', 'kiwi', 'mango', 'peach', 'lime', 'pomegranate', 'pineapple'];\nconst NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack', 'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper', 'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n/**\n * @title Data table with sorting, pagination, and filtering.\n */\n\nlet TableOverviewExample = class TableOverviewExample {\n  constructor() {\n    this.displayedColumns = ['id', 'name', 'progress', 'fruit']; // Create 100 users\n\n    const users = Array.from({\n      length: 100\n    }, (_, k) => createNewUser(k + 1)); // Assign the data to the data source for the table to render\n\n    this.dataSource = new MatTableDataSource(users);\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(event) {\n    const filterValue = event.target.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n};\n\n__decorate([ViewChild(MatPaginator)], TableOverviewExample.prototype, \"paginator\", void 0);\n\n__decorate([ViewChild(MatSort)], TableOverviewExample.prototype, \"sort\", void 0);\n\nTableOverviewExample = __decorate([Component({\n  selector: 'table-overview-example',\n  styleUrls: ['table-overview-example.css'],\n  templateUrl: 'table-overview-example.html'\n})], TableOverviewExample);\nexport { TableOverviewExample };\n/** Builds and returns a new User. */\n\nfunction createNewUser(id) {\n  const name = NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' + NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n  return {\n    id: id.toString(),\n    name: name,\n    progress: Math.round(Math.random() * 100).toString(),\n    fruit: FRUITS[Math.round(Math.random() * (FRUITS.length - 1))]\n  };\n}","map":null,"metadata":{},"sourceType":"module"}